<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
require APPPATH . '/libraries/REST_Controller.php';

class User extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();
        $this->load->model('user_model');
		$this->load->model('auth_model');
    }

    public function users_get()
    {
        $username = $this->get('username');
        $token = $this->get('token');
		if($this->auth_model->verify_admin($username, $token)){
			$users = $this->user_model->get();
			$this->set_response($users, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
		}


    }



    public function users_post()
    {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function users_put()
    {
        $data = array(
            'username' => $this->put('username'),
            'password' => md5($this->put('password')),
            'email' => $this->put('email'),
        );

        if(!$this->user_model->exists($this->put('username'))){
            $user_id = (int) $this->user_model->create($data);

            if(true){
                $message = [
                    'id' => $user_id,
                    'message' => 'User Created'
                ];
                $this->set_response($message, REST_Controller::HTTP_CREATED);

            }
            else {
                $this->response("Error Creating User", REST_Controller::HTTP_BAD_REQUEST);
            }
        }
        else{
            $this->response("Username Already exists", REST_Controller::HTTP_BAD_REQUEST);
        }

    }



    public function users_delete()
    {
        $id = (int) $this->get('id');
        $username = $this->delete('username');
        $token = $this->delete('token');
		
		if($this->auth_model->verify_admin($username, $token)){

			// Validate the id.
			if ($id <= 0)
			{
				// Set the response and exit
				$this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
			}
			
			$this->user_model->delete($id);

			// $this->some_model->delete_something($id);
			$message = [
				'id' => $id,
				'message' => 'Deleted the resource'
			];
		}
		else{
			$message = [
				'id' => $id,
				'message' => 'Unable to locate'
			];
		}

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

}
